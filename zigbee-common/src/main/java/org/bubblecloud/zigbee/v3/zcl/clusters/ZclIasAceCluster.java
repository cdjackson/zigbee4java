package org.bubblecloud.zigbee.v3.zcl.clusters;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Future;
import org.bubblecloud.zigbee.v3.CommandResult;
import org.bubblecloud.zigbee.v3.ZigBeeDeviceAddress;
import org.bubblecloud.zigbee.v3.ZigBeeNetworkManager;
import org.bubblecloud.zigbee.v3.zcl.ZclAttribute;
import org.bubblecloud.zigbee.v3.zcl.ZclCluster;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.ArmCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.ArmResponse;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.BypassCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.EmergencyCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.FireCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.GetZoneIdMapCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.GetZoneIdMapResponse;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.GetZoneInformationCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.GetZoneInformationResponse;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.PanicCommand;
import org.bubblecloud.zigbee.v3.zcl.protocol.ZclDataType;

/**
 * <b>IAS ACE</b> cluster implementation (<i>Cluster ID 0x0501</i>).
 * <p>
 * The IAS ACE cluster defines an interface to the functionality of any Ancillary
 * Control Equipment of the IAS system. Using this cluster, a ZigBee enabled ACE
 * device can access a IAS CIE device and manipulate the IAS system, on behalf of a
 * level-2 user.
 * </p>
 * This code is autogenerated. Modifications may be overwritten!
 */
public class ZclIasAceCluster extends ZclCluster {
    // Cluster ID
    public static final int CLUSTER_ID = 0x0501;

    // Cluster Name
    public static final String CLUSTER_NAME = "IAS ACE";

    // Attribute initialisation
    protected Map<Integer, ZclAttribute> initializeAttributes() {
        Map<Integer, ZclAttribute> attributeMap = new HashMap<Integer, ZclAttribute>(0);


        return attributeMap;
    }

    /**
     * Default constructor.
     */
    public ZclIasAceCluster(final ZigBeeNetworkManager zigbeeManager, final ZigBeeDeviceAddress zigbeeAddress) {
        super(zigbeeManager, zigbeeAddress, CLUSTER_ID, CLUSTER_NAME);
    }



    /**
     * The Arm Command
     *
     * @param armMode {@link Integer} Arm Mode
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> armCommand(Integer armMode) {
        ArmCommand command = new ArmCommand();

        // Set the fields
        command.setArmMode(armMode);

        return send(command);
    }


    /**
     * The Bypass Command
     *
     * @param numberOfZones {@link Integer} Number of Zones
     * @param zoneIDs {@link List<Unsigned8BitInteger>} Zone IDs
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> bypassCommand(Integer numberOfZones, List<Unsigned8BitInteger> zoneIDs) {
        BypassCommand command = new BypassCommand();

        // Set the fields
        command.setNumberOfZones(numberOfZones);
        command.setZoneIDs(zoneIDs);

        return send(command);
    }


    /**
     * The Emergency Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> emergencyCommand() {
        EmergencyCommand command = new EmergencyCommand();

        return send(command);
    }


    /**
     * The Fire Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> fireCommand() {
        FireCommand command = new FireCommand();

        return send(command);
    }


    /**
     * The Panic Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> panicCommand() {
        PanicCommand command = new PanicCommand();

        return send(command);
    }


    /**
     * The Get Zone ID Map Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getZoneIdMapCommand() {
        GetZoneIdMapCommand command = new GetZoneIdMapCommand();

        return send(command);
    }


    /**
     * The Get Zone Information Command
     *
     * @param zoneId {@link Integer} Zone ID
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getZoneInformationCommand(Integer zoneId) {
        GetZoneInformationCommand command = new GetZoneInformationCommand();

        // Set the fields
        command.setZoneId(zoneId);

        return send(command);
    }


    /**
     * The  Arm Response
     *
     * @param armNotification {@link Integer} Arm Notification
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> armResponse(Integer armNotification) {
        ArmResponse command = new ArmResponse();

        // Set the fields
        command.setArmNotification(armNotification);

        return send(command);
    }


    /**
     * The  Get Zone ID Map Response
     *
     * @param zoneIdMapSection0 {@link Integer} Zone ID Map section 0
     * @param zoneIdMapSection1 {@link Integer} Zone ID Map section 1
     * @param zoneIdMapSection2 {@link Integer} Zone ID Map section 2
     * @param zoneIdMapSection3 {@link Integer} Zone ID Map section 3
     * @param zoneIdMapSection4 {@link Integer} Zone ID Map section 4
     * @param zoneIdMapSection5 {@link Integer} Zone ID Map section 5
     * @param zoneIdMapSection6 {@link Integer} Zone ID Map section 6
     * @param zoneIdMapSection7 {@link Integer} Zone ID Map section 7
     * @param zoneIdMapSection8 {@link Integer} Zone ID Map section 8
     * @param zoneIdMapSection9 {@link Integer} Zone ID Map section 9
     * @param zoneIdMapSection10 {@link Integer} Zone ID Map section 10
     * @param zoneIdMapSection11 {@link Integer} Zone ID Map section 11
     * @param zoneIdMapSection12 {@link Integer} Zone ID Map section 12
     * @param zoneIdMapSection13 {@link Integer} Zone ID Map section 13
     * @param zoneIdMapSection14 {@link Integer} Zone ID Map section 14
     * @param zoneIdMapSection15 {@link Integer} Zone ID Map section 15
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getZoneIdMapResponse(Integer zoneIdMapSection0, Integer zoneIdMapSection1, Integer zoneIdMapSection2, Integer zoneIdMapSection3, Integer zoneIdMapSection4, Integer zoneIdMapSection5, Integer zoneIdMapSection6, Integer zoneIdMapSection7, Integer zoneIdMapSection8, Integer zoneIdMapSection9, Integer zoneIdMapSection10, Integer zoneIdMapSection11, Integer zoneIdMapSection12, Integer zoneIdMapSection13, Integer zoneIdMapSection14, Integer zoneIdMapSection15) {
        GetZoneIdMapResponse command = new GetZoneIdMapResponse();

        // Set the fields
        command.setZoneIdMapSection0(zoneIdMapSection0);
        command.setZoneIdMapSection1(zoneIdMapSection1);
        command.setZoneIdMapSection2(zoneIdMapSection2);
        command.setZoneIdMapSection3(zoneIdMapSection3);
        command.setZoneIdMapSection4(zoneIdMapSection4);
        command.setZoneIdMapSection5(zoneIdMapSection5);
        command.setZoneIdMapSection6(zoneIdMapSection6);
        command.setZoneIdMapSection7(zoneIdMapSection7);
        command.setZoneIdMapSection8(zoneIdMapSection8);
        command.setZoneIdMapSection9(zoneIdMapSection9);
        command.setZoneIdMapSection10(zoneIdMapSection10);
        command.setZoneIdMapSection11(zoneIdMapSection11);
        command.setZoneIdMapSection12(zoneIdMapSection12);
        command.setZoneIdMapSection13(zoneIdMapSection13);
        command.setZoneIdMapSection14(zoneIdMapSection14);
        command.setZoneIdMapSection15(zoneIdMapSection15);

        return send(command);
    }


    /**
     * The  Get Zone Information Response
     *
     * @param zoneId {@link Integer} Zone ID
     * @param zoneType {@link Integer} Zone Type
     * @param ieeeAddress {@link Long} IEEE address
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getZoneInformationResponse(Integer zoneId, Integer zoneType, Long ieeeAddress) {
        GetZoneInformationResponse command = new GetZoneInformationResponse();

        // Set the fields
        command.setZoneId(zoneId);
        command.setZoneType(zoneType);
        command.setIeeeAddress(ieeeAddress);

        return send(command);
    }

}
