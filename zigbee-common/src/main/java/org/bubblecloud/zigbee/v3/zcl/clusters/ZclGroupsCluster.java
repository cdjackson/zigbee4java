package org.bubblecloud.zigbee.v3.zcl.clusters;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Future;
import org.bubblecloud.zigbee.v3.CommandResult;
import org.bubblecloud.zigbee.v3.ZigBeeDeviceAddress;
import org.bubblecloud.zigbee.v3.ZigBeeNetworkManager;
import org.bubblecloud.zigbee.v3.zcl.ZclAttribute;
import org.bubblecloud.zigbee.v3.zcl.ZclCluster;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.AddGroupCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.AddGroupIfIdentifyingCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.AddGroupResponse;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.GetGroupMembershipCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.GetGroupMembershipResponse;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.RemoveAllGroupsCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.RemoveGroupCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.RemoveGroupResponse;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.ViewGroupCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.ViewGroupResponse;
import org.bubblecloud.zigbee.v3.zcl.field.*;
import org.bubblecloud.zigbee.v3.zcl.protocol.ZclDataType;
import org.bubblecloud.zigbee.v3.zcl.protocol.ZclFieldType;

/**
 * <b>Groups</b> cluster implementation (<i>Cluster ID 0x0004</i>).
 * <p>
 * The ZigBee specification provides the capability for group addressing. That is,
 * any endpoint on any device may be assigned to one or more groups, each labeled
 * with a 16-bit identifier (0x0001 â€“ 0xfff7), which acts for all intents and purposes
 * like a network address. Once a group is established, frames, sent using the
 * APSDE-DATA.request primitive and having a DstAddrMode of 0x01, denoting
 * group addressing, will be delivered to every endpoint assigned to the group
 * address named in the DstAddr parameter of the outgoing APSDE-DATA.request
 * primitive on every device in the network for which there are such endpoints.
 * <br>
 * Management of group membership on each device and endpoint is implemented
 * by the APS, but the over-the-air messages that allow for remote management and
 * commissioning of groups are defined here in the cluster library on the theory that,
 * while the basic group addressing facilities are integral to the operation of the
 * stack, not every device will need or want to implement this management cluster.
 * Furthermore, the placement of the management commands here allows developers
 * of proprietary profiles to avoid implementing the library cluster but still exploit
 * group addressing
 * </p>
 * This code is autogenerated. Modifications may be overwritten!
 */
public class ZclGroupsCluster extends ZclCluster {
    // Cluster ID
    public static final int CLUSTER_ID = 0x0004;

    // Cluster Name
    public static final String CLUSTER_NAME = "Groups";

    // Attribute initialisation
    protected Map<Integer, ZclAttribute> initializeAttributes() {
        Map<Integer, ZclAttribute> attributeMap = new HashMap<Integer, ZclAttribute>(0);


        return attributeMap;
    }

    /**
     * Default constructor.
     */
    public ZclGroupsCluster(final ZigBeeNetworkManager zigbeeManager, final ZigBeeDeviceAddress zigbeeAddress) {
        super(zigbeeManager, zigbeeAddress, CLUSTER_ID, CLUSTER_NAME);
    }



    /**
     * The Add Group Command
     *
     * @param groupId {@link Integer} Group ID
     * @param groupName {@link String} Group Name
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> addGroupCommand(Integer groupId, String groupName) {
        AddGroupCommand command = new AddGroupCommand();

        // Set the fields
        command.setGroupId(groupId);
        command.setGroupName(groupName);

        return send(command);
    }


    /**
     * The View Group Command
     *
     * @param groupId {@link Integer} Group ID
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> viewGroupCommand(Integer groupId) {
        ViewGroupCommand command = new ViewGroupCommand();

        // Set the fields
        command.setGroupId(groupId);

        return send(command);
    }


    /**
     * The Get Group Membership Command
     *
     * @param groupCount {@link Integer} Group count
     * @param groupList {@link List<Unsigned16BitInteger>} Group list
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getGroupMembershipCommand(Integer groupCount, List<Unsigned16BitInteger> groupList) {
        GetGroupMembershipCommand command = new GetGroupMembershipCommand();

        // Set the fields
        command.setGroupCount(groupCount);
        command.setGroupList(groupList);

        return send(command);
    }


    /**
     * The Remove Group Command
     *
     * @param groupId {@link Integer} Group ID
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> removeGroupCommand(Integer groupId) {
        RemoveGroupCommand command = new RemoveGroupCommand();

        // Set the fields
        command.setGroupId(groupId);

        return send(command);
    }


    /**
     * The Remove All Groups Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> removeAllGroupsCommand() {
        RemoveAllGroupsCommand command = new RemoveAllGroupsCommand();

        return send(command);
    }


    /**
     * The Add Group If Identifying Command
     *
     * @param groupId {@link Integer} Group ID
     * @param groupName {@link String} Group Name
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> addGroupIfIdentifyingCommand(Integer groupId, String groupName) {
        AddGroupIfIdentifyingCommand command = new AddGroupIfIdentifyingCommand();

        // Set the fields
        command.setGroupId(groupId);
        command.setGroupName(groupName);

        return send(command);
    }


    /**
     * The  Add Group Response
     *
     * @param status {@link Integer} Status
     * @param groupId {@link Integer} Group ID
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> addGroupResponse(Integer status, Integer groupId) {
        AddGroupResponse command = new AddGroupResponse();

        // Set the fields
        command.setStatus(status);
        command.setGroupId(groupId);

        return send(command);
    }


    /**
     * The  View Group Response
     *
     * @param status {@link Integer} Status
     * @param groupId {@link Integer} Group ID
     * @param groupName {@link String} Group Name
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> viewGroupResponse(Integer status, Integer groupId, String groupName) {
        ViewGroupResponse command = new ViewGroupResponse();

        // Set the fields
        command.setStatus(status);
        command.setGroupId(groupId);
        command.setGroupName(groupName);

        return send(command);
    }


    /**
     * The  Get Group Membership Response
     *
     * @param capacity {@link Integer} Capacity
     * @param groupCount {@link Integer} Group count
     * @param groupList {@link List<Unsigned16BitInteger>} Group list
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getGroupMembershipResponse(Integer capacity, Integer groupCount, List<Unsigned16BitInteger> groupList) {
        GetGroupMembershipResponse command = new GetGroupMembershipResponse();

        // Set the fields
        command.setCapacity(capacity);
        command.setGroupCount(groupCount);
        command.setGroupList(groupList);

        return send(command);
    }


    /**
     * The  Remove Group Response
     *
     * @param status {@link Integer} Status
     * @param groupId {@link Integer} Group ID
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> removeGroupResponse(Integer status, Integer groupId) {
        RemoveGroupResponse command = new RemoveGroupResponse();

        // Set the fields
        command.setStatus(status);
        command.setGroupId(groupId);

        return send(command);
    }

}
